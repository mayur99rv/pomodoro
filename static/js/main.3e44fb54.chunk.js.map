{"version":3,"sources":["components/Buttons.js","context/SettingsContext.js","components/CountdownAnimation.js","components/SetPomodoro.js","App.js","index.js"],"names":["Buttons","title","activeClass","_callback","className","onClick","SettingContext","createContext","prev","console","log","timerobj","localStorage","getItem","JSON","parse","value","SettingsContextProvider","props","active","work","short","long","useState","pomodoro","setPomodoro","executing","setExecuting","startAnimate","setStartAnimate","shorts","setShorts","longs","setLongs","updateExecute","updatedSettings","setTimerTime","evaluate","Provider","stopTimer","setItem","startTimer","pauseTimer","settingBtn","removeItem","setCurrentTimer","active_state","children","remainingTime","minutes","Math","floor","seconds","CoundownAnimation","key","timer","animate","useContext","isPlaying","duration","size","colors","strokeWidth","trailColor","onComplete","SetPomodoro","newTimer","setNewTimer","setWork","setShort","setLong","handleChange","input","target","name","parseInt","noValidate","onChange","e","preventDefault","stringify","App","useEffect","ReactDOM","render","SettingsContext","document","getElementById"],"mappings":"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","file":"static/js/main.3e44fb54.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Buttons = ({ title, activeClass, _callback }) => {\r\n  return (\r\n    <div>\r\n      <button className={activeClass} onClick={_callback}>\r\n        {title}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import { createContext, useState } from \"react\";\r\n\r\nexport const SettingContext = createContext();\r\nlet prev = 0;\r\nconsole.log(prev);\r\nlet timerobj = localStorage.getItem(\"timers\");\r\ntimerobj = JSON.parse(timerobj);\r\nconsole.log(timerobj);\r\nlet active = undefined;\r\nlet value = 0;\r\nconst SettingsContextProvider = (props) => {\r\n  if (timerobj) {\r\n    active = timerobj.active;\r\n    switch (active) {\r\n      case \"work\":\r\n        value = timerobj.work;\r\n        break;\r\n      case \"short\":\r\n        value = timerobj.short;\r\n        break;\r\n      case \"long\":\r\n        value = timerobj.long;\r\n        break;\r\n      default:\r\n        value = 0;\r\n        break;\r\n    }\r\n  }\r\n  console.log(value);\r\n  const [pomodoro, setPomodoro] = useState(value);\r\n  const [executing, setExecuting] = useState({});\r\n  const [startAnimate, setStartAnimate] = useState(false);\r\n\r\n  const [shorts, setShorts] = useState(\r\n    (localStorage.getItem(\"shorts\") && localStorage.getItem(\"shorts\")) || 0\r\n  );\r\n  const [longs, setLongs] = useState(\r\n    (localStorage.getItem(\"longs\") && localStorage.getItem(\"longs\")) || 0\r\n  );\r\n\r\n  function startTimer() {\r\n    setStartAnimate(true);\r\n  }\r\n\r\n  function pauseTimer() {\r\n    setStartAnimate(false);\r\n  }\r\n\r\n  function stopTimer() {\r\n    // setStartAnimate(false);\r\n    switch (executing.active) {\r\n      case \"work\":\r\n        break;\r\n      case \"short\":\r\n        setShorts(shorts + 1);\r\n        localStorage.setItem(\"shorts\", shorts);\r\n        console.log(shorts);\r\n        break;\r\n      case \"long\":\r\n        setLongs(longs + 1);\r\n        localStorage.setItem(\"longs\", longs);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const updateExecute = (updatedSettings) => {\r\n    setExecuting(updatedSettings); // from use-state\r\n    setTimerTime(updatedSettings); // function\r\n  };\r\n  const settingBtn = () => {\r\n    setExecuting({});\r\n    localStorage.setItem(\"shorts\", 0);\r\n    localStorage.setItem(\"longs\", 0);\r\n    localStorage.removeItem(\"timer\");\r\n    setPomodoro(0);\r\n    setLongs(0);\r\n    setShorts(0);\r\n  };\r\n  const setCurrentTimer = (active_state) => {\r\n    console.log(active_state);\r\n    updateExecute({\r\n      ...executing,\r\n      active: active_state,\r\n    });\r\n    setTimerTime(executing);\r\n  };\r\n\r\n  const setTimerTime = (evaluate) => {\r\n    switch (evaluate.active) {\r\n      case \"work\":\r\n        setPomodoro(evaluate.work);\r\n        prev = evaluate.work;\r\n        break;\r\n      case \"short\":\r\n        setPomodoro(evaluate.short);\r\n        prev = evaluate.short;\r\n        break;\r\n      case \"long\":\r\n        setPomodoro(evaluate.long);\r\n        prev = evaluate.long;\r\n        break;\r\n      default:\r\n        setPomodoro(0);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const children = ({ remainingTime }) => {\r\n    const minutes = Math.floor(remainingTime / 60);\r\n    const seconds = remainingTime % 60;\r\n    return `${minutes} : ${seconds}`;\r\n  };\r\n\r\n  return (\r\n    <SettingContext.Provider\r\n      value={{\r\n        stopTimer,\r\n        updateExecute,\r\n        pomodoro,\r\n        executing,\r\n        startAnimate,\r\n        startTimer,\r\n        pauseTimer,\r\n        settingBtn,\r\n        setCurrentTimer,\r\n        children,\r\n        shorts,\r\n        longs,\r\n        setLongs,\r\n        setShorts,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SettingContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SettingsContextProvider;\r\n","import { useContext } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { SettingContext } from \"../context/SettingsContext\";\r\n\r\nconst CoundownAnimation = ({\r\n  key = 1,\r\n  timer = 1,\r\n  animate = true,\r\n  children,\r\n}) => {\r\n  const { stopTimer } = useContext(SettingContext);\r\n\r\n  return (\r\n    <div>\r\n      <CountdownCircleTimer\r\n        key={key}\r\n        isPlaying={animate}\r\n        duration={timer * 60}\r\n        size={220}\r\n        colors={[\r\n          [\"#004777\", 0.33],\r\n          [\"#F7B801\", 0.33],\r\n          [\"#A30000\", 0.33],\r\n        ]}\r\n        strokeWidth={6}\r\n        trailColor=\"#151932\"\r\n        onComplete={() => {\r\n          stopTimer();\r\n          return [true, 1500];\r\n        }}\r\n      >\r\n        {children}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoundownAnimation;\r\n","import React, { useContext } from \"react\";\r\nimport Buttons from \"./Buttons\";\r\nimport { useState } from \"react\";\r\nimport { SettingContext } from \"../context/SettingsContext\";\r\nconst SetPomodoro = () => {\r\n  const [newTimer, setNewTimer] = useState({\r\n    // work: 0.3,\r\n    // short: 0.1,\r\n    // long: 0.2,\r\n    active: \"work\",\r\n  });\r\n  const [work, setWork] = useState(newTimer.work);\r\n  const [short, setShort] = useState(newTimer.short);\r\n  const [long, setLong] = useState(newTimer.long);\r\n\r\n  const { updateExecute } = useContext(SettingContext);\r\n\r\n  const handleChange = (input) => {\r\n    const { name, value } = input.target;\r\n    switch (name) {\r\n      case \"work\":\r\n        setWork(input.target.value);\r\n        setNewTimer({\r\n          ...newTimer,\r\n          work: parseInt(value),\r\n        });\r\n        break;\r\n      case \"shortBreak\":\r\n        setShort(input.target.value);\r\n        setNewTimer({\r\n          short: parseInt(value),\r\n          ...newTimer,\r\n        });\r\n        break;\r\n      case \"longBreak\":\r\n        setLong(input.target.value);\r\n        setNewTimer({\r\n          long: parseInt(value),\r\n          ...newTimer,\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    localStorage.setItem(\"timers\", JSON.stringify(newTimer));\r\n    updateExecute(newTimer);\r\n  };\r\n  return (\r\n    <div className=\"form-container\">\r\n      <form noValidate>\r\n        <div className=\"input-wrapper\">\r\n          <h3>Make Necessary Changes here. </h3>\r\n          <label className=\"input\">\r\n            Working Time:\r\n            <input name=\"work\" onChange={handleChange} value={work} />\r\n          </label>\r\n          <label className=\"input\">\r\n            Shortbreak Time:\r\n            <input name=\"shortBreak\" onChange={handleChange} value={short} />\r\n          </label>\r\n          <label className=\"input\">\r\n            Longbreak time:\r\n            <input name=\"longBreak\" onChange={handleChange} value={long} />\r\n          </label>\r\n          <Buttons title=\"Set Timer\" _callback={handleSubmit} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetPomodoro;\r\n","import { useContext, useEffect } from \"react\";\nimport Buttons from \"./components/Buttons\";\nimport CoundownAnimation from \"./components/CountdownAnimation\";\nimport SetPomodoro from \"./components/SetPomodoro\";\nimport { SettingContext } from \"./context/SettingsContext\";\n\nfunction App() {\n  const {\n    pomodoro,\n    executing,\n    setCurrentTimer,\n    settingBtn,\n    children,\n    startAnimate,\n    startTimer,\n    pauseTimer,\n    updateExecute,\n\n    shorts,\n    longs,\n  } = useContext(SettingContext);\n\n  useEffect(() => {\n    updateExecute(executing);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [executing, startAnimate]);\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shorts, longs]);\n\n  return (\n    <div className=\"container\">\n      <h1>pomodoro</h1>\n      <small>Be productive the right way.</small>\n      {console.log(\"po\" + pomodoro)}\n      {pomodoro === 0 ? (\n        <SetPomodoro />\n      ) : (\n        <>\n          <ul className=\"labels\">\n            <li>\n              <Buttons\n                title=\"Work\"\n                activeClass={executing.active === \"work\" ? \"active-label\" : \"\"}\n                _callback={() => setCurrentTimer(\"work\")}\n              />\n            </li>\n            <li>\n              <Buttons\n                title=\"Short Break\"\n                activeClass={executing.active === \"short\" ? \"active-label\" : \"\"}\n                _callback={() => setCurrentTimer(\"short\")}\n              />\n            </li>\n            <li>\n              <Buttons\n                title=\"Long Break\"\n                activeClass={executing.active === \"long\" ? \"active-label\" : \"\"}\n                _callback={() => setCurrentTimer(\"long\")}\n              />\n            </li>\n          </ul>\n          <Buttons title=\"Settings\" _callback={settingBtn} />\n          <div className=\"time-container\">\n            <div className=\"time-wrapper\">\n              <CoundownAnimation\n                key={pomodoro}\n                timer={pomodoro}\n                animate={startAnimate}\n              >\n                {children}\n              </CoundownAnimation>\n            </div>\n          </div>\n\n          <div className=\"button-wrapper\">\n            <Buttons\n              title=\"Start\"\n              activeClass={startAnimate === true ? \"start\" : \"\"}\n              _callback={startTimer}\n            />\n            <Buttons\n              title=\"Pause\"\n              activeClass={!startAnimate === true ? \"pause\" : \"\"}\n              _callback={pauseTimer}\n            />\n            <Buttons\n              title=\"Reset\"\n              activeClass={\"reset\"}\n              _callback={settingBtn}\n            />\n          </div>\n\n          <div>\n            <h1>Your logs</h1>\n            <h3>Short breaks taken: {shorts} </h3>\n            <h3>Long breaks taken: {longs} </h3>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport SettingsContextProvider from \"./context/SettingsContext\";\n\nReactDOM.render(\n  <SettingsContextProvider>\n    <App />\n  </SettingsContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}